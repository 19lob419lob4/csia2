[{"C:\\Users\\User\\Documents\\GitHub\\csia2\\frontend\\src\\index.js":"1","C:\\Users\\User\\Documents\\GitHub\\csia2\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\GitHub\\csia2\\frontend\\src\\App.js":"3","C:\\Users\\User\\Documents\\GitHub\\csia2\\frontend\\src\\components\\Menu.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":880,"mtime":1607053975107,"results":"8","hashOfConfig":"6"},{"size":9299,"mtime":1607173284469,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"k8lcdn",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\User\\Documents\\GitHub\\csia2\\frontend\\src\\index.js",[],["21","22"],"C:\\Users\\User\\Documents\\GitHub\\csia2\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\GitHub\\csia2\\frontend\\src\\App.js",["23"],"import React from 'react';\nimport './App.css';\n\nimport Menu from './components/Menu';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // 0 - notes, 1 - flascard\n      mode: 0\n    }\n\n    this.toggleMenu = this.toggleMenu.bind(this);\n\n  };\n\n\n  toggleMenu(x){\n    this.setState({mode:x})\n  }\n\n  \n  \n  render(){\n    return(\n      <div className='contentWrapper'>\n        <div className='sideBar' style={this.state.mode==0?{backgroundColor: 'royalblue'}:{backgroundColor: 'red'}}>\n          <button style={{alignSelf:'flex-end'}} onClick={()=>this.toggleMenu(0)}>Notes</button>\n          <button onClick={()=>this.toggleMenu(1)}>Flashcards</button>   \n        </div>\n\n        {/* blank div for grid column block... */}\n        <div></div> \n\n        <Menu mode={this.state.mode}/>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","C:\\Users\\User\\Documents\\GitHub\\csia2\\frontend\\src\\components\\Menu.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40"],"import React from 'react';\r\nimport './Menu.css';\r\nimport uniqid from 'uniqid'\r\nimport axios from 'axios';\r\n\r\nclass Menu extends React.Component {\r\n  \r\n  \r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        loadingData: true,\r\n        subjects:null,\r\n        addSubject:false,\r\n        newSubject:'',\r\n\r\n\r\n        subjectFocus:false,\r\n        subjectData: null,\r\n        activeTopic: 0,\r\n\r\n        keywords: ['is','are','because'],\r\n\r\n        editMode: false,\r\n        editValues: [], //for editing input in react...\r\n        newEdit: false,\r\n        newEditValue: ''\r\n\r\n    }\r\n    // this.addSubject.bind = this.addSubject.bind(this);\r\n    // this.cancelAddSubject.bind = this.cancelAddSubject.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.changeEditValue = this.changeEditValue.bind(this);\r\n    this.addEditObj = this.addEditObj.bind(this);\r\n\r\n  }\r\n\r\n  handleChange(x,event){\r\n    let currentValues = this.state.editValues;\r\n    currentValues[x] = event.target.value;\r\n    this.setState({editValues:currentValues})\r\n  }\r\n\r\n  changeEditValue(event){\r\n   this.setState({newEditValue:event.target.value})\r\n  }\r\n\r\n  async componentDidMount(){\r\n    this.getData()\r\n  }\r\n\r\n  async getData(){\r\n    axios.get('http://localhost:3001/subjects')\r\n        .then(response =>{   \r\n            let data = response.data;\r\n            this.setState({subjects:data, loadingData:false});\r\n            // console.log(data)\r\n\r\n        })\r\n        .catch(error =>{\r\n            console.log(error) //return error fail to retrieve data\r\n        })\r\n  }\r\n\r\n  switchTopic(x){\r\n    this.setState({activeTopic:x})\r\n\r\n\r\n  }\r\n\r\n  renderARE(items){\r\n    let result =''\r\n\r\n    for(let i=0; i<items.length; i++){\r\n      result+=items[i]\r\n      if(i!=items.length-1){\r\n        result+=' + '\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  saveARE(areString){\r\n    var areArr = areString.split(' + ');\r\n    return areArr;\r\n  }\r\n  \r\n  loadSubject(x){\r\n\r\n    this.setState({subjectFocus:true, subjectData:this.state.subjects[x]})\r\n\r\n    //setup editable content...\r\n    let values = [];\r\n    let statementList = this.state.subjects[x].topics[this.state.activeTopic].content;\r\n    for(let i=0; i<statementList.length; i++){\r\n      let before = statementList[i].before;\r\n      let keyword = statementList[i].keyword ==-1?'':this.state.keywords[statementList[i].keyword];\r\n      let after = this.renderARE(statementList[i].after);\r\n\r\n\r\n\r\n      values.push(before + ' ' + keyword + ' ' + after);        \r\n    }\r\n\r\n    this.setState({editValues:values});\r\n  }\r\n\r\n  addEditObj(){\r\n    this.setState({newEdit:true})\r\n    \r\n    let currentValues = this.state.editValues;\r\n    currentValues.push(this.state.newEditValue);\r\n\r\n    this.setState({editValues:currentValues, newEditValue:'', newEdit:false})\r\n\r\n    var addEditObj = document.getElementById('addEditObj');\r\n    addEditObj.value = ''\r\n    addEditObj.focus();\r\n\r\n  }\r\n\r\n  saveEdits=async(e)=>{\r\n    e.preventDefault();\r\n    //checking which statements contains keyword (is, are, because)\r\n\r\n    let updatedStatements = [];\r\n\r\n    for(let j=0; j<this.state.editValues.length; j++){\r\n      let keywordStatement = null; \r\n      for(let i=0; i<this.state.keywords.length; i++){\r\n        let keyword = this.state.keywords[i]\r\n        let keywordIndex = this.state.editValues[j].indexOf(' '+ keyword + ' ')\r\n\r\n        if(keywordIndex!=-1){\r\n          //shows where to cut statements...\r\n\r\n          let before = this.state.editValues[j].substring(0,keywordIndex);\r\n\r\n          let after = this.state.editValues[j].substring(keywordIndex+keyword.length);\r\n\r\n          let afterARR = this.saveARE(after);\r\n          //update keywordStatements\r\n          \r\n          keywordStatement = {before:before, keyword:i, after:afterARR};\r\n\r\n          break;\r\n          }\r\n        \r\n      }\r\n      if(keywordStatement!=null){\r\n        updatedStatements.push(keywordStatement)\r\n      }else{\r\n        updatedStatements.push({before:this.state.editValues[j], keyword:-1, after:[]})\r\n      }\r\n    }\r\n    //update database...\r\n    let currentData = this.state.subjectData;\r\n    \r\n    \r\n\r\n    currentData.topics[this.state.activeTopic].content = updatedStatements;\r\n    \r\n    console.log(currentData)\r\n\r\n    let putAddress = 'http://localhost:3001/subjects/' + this.state.subjectData._id;\r\n    axios.put(putAddress,currentData)\r\n      .then(response => {\r\n        console.log(response)\r\n      })\r\n      .catch(error =>{\r\n        console.log(error)\r\n      })\r\n    \r\n\r\n    //return back to menu\r\n    this.setState({editMode:false})\r\n\r\n     \r\n    // this.setState({subjectData:currentData})\r\n \r\n  }\r\n\r\n  render(){\r\n\r\n    let renderSubjects;\r\n    if (this.state.loadingData==false){\r\n      renderSubjects = this.state.subjects.map((subject,x) =>\r\n        <a \r\n        className='subjectItem' \r\n        key={uniqid()} \r\n        style={this.props.mode==0?{background: 'linear-gradient(to bottom, royalblue, royalblue 60%, #d3d3d3 60%, #d3d3d3 100%)'}:{background: 'linear-gradient(to bottom, red, red 60%, #d3d3d3 60%, #d3d3d3 100%)'}}\r\n        onClick={()=>{this.loadSubject(x)}}\r\n        >\r\n\r\n          \r\n          <p>{subject.subjectName}</p>\r\n\r\n          <p style={this.props.mode==0?{color:\"royalblue\"}:{color:'red'}}\r\n          >{subject.topics.length} Topics</p>\r\n  \r\n\r\n        </a>\r\n     \r\n        );\r\n    }\r\n\r\n\r\n\r\n    let focusMenu;\r\n    if(this.state.subjectFocus){\r\n      let subtopics = this.state.subjectData.topics;\r\n      focusMenu = subtopics.map((item,x) =>\r\n        <a key={uniqid()} onClick={()=>this.switchTopic(x)}>{item.topicName}</a>\r\n      );\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    let content;\r\n\r\n    if(this.state.subjectFocus){\r\n      let statementList = this.state.subjectData.topics[this.state.activeTopic].content;\r\n      content = statementList.map((statement, x)=>\r\n        <div className='contentObj' key={uniqid()}>\r\n          <p>{statement.before}&nbsp;\r\n          {statement.keyword==-1?(<span style={{display:'none'}}></span>):(<span>{this.state.keywords[statement.keyword]}</span>)}\r\n          &nbsp;{this.renderARE(statement.after)}</p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n    let editContent;\r\n    \r\n\r\n    //gen array of changeable 'values' in state...\r\n    if(this.state.editMode){\r\n      editContent = this.state.editValues.map((editvalue,x)=>\r\n        <div className='editObj' key={uniqid()}>\r\n          <textarea id={x} type=\"text\" value={editvalue} onChange={(e)=>this.handleChange(x,e)}/> \r\n\r\n        </div>\r\n\r\n      )\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n// {/* mode this.props ==mode */}\r\n    return(\r\n\r\n      <div style={{display:'grid'}}>\r\n\r\n        {this.state.subjectFocus==false?(\r\n\r\n          <div className='subjectWrapper'>\r\n                      \r\n          {this.state.loadingData || !this.state.subjects ?(<div></div>):(\r\n\r\n          <div className='subjectItemWrapper'>{renderSubjects}</div>   \r\n\r\n          )}\r\n          </div>\r\n        ):(\r\n\r\n          <div className='subjectContentWrapper'>\r\n\r\n            {this.state.editMode==false?(\r\n            <div className='focusMenu' style={this.props.mode==0?{backgroundColor: 'royalblue'}:{backgroundColor: 'red'}}>\r\n              <button className ='backButton' onClick={()=>this.setState({subjectFocus:false})}>Back</button>\r\n              {focusMenu}\r\n            </div>\r\n\r\n            ):(\r\n            <div className='focusMenu' style={this.props.mode==0?{backgroundColor: 'royalblue'}:{backgroundColor: 'red'}}>\r\n              <div></div>\r\n              <a style={{pointerEvents:'none'}}>{this.state.subjectData.topics[this.state.activeTopic].topicName}</a>\r\n            </div>\r\n            )}\r\n\r\n\r\n\r\n            {this.state.editMode==false?(<div className='content'>{content}</div>):\r\n            \r\n            (<form className='editContent' onSubmit={this.saveEdits}>\r\n              \r\n              {editContent}\r\n              \r\n              <div className='editObj'>\r\n                <textarea\r\n                style={this.state.newEdit?{}:{border:'1px solid grey', borderRadius:'25px'}} \r\n                onBlur={this.addEditObj} id={'addEditObj'} \r\n                type=\"text\"\r\n                 value={this.newEditValue} \r\n                 onChange={(e)=>this.changeEditValue(e)}/> \r\n              </div>\r\n\r\n              <div className='editObj' style={this.state.newEditValue==false?{pointerEvents:'none'}:{}}>\r\n                <textarea \r\n                style={this.state.newEdit?{border:'1px solid grey', borderRadius:'25px'}:{}} \r\n                onClick={this.addEditObj} id={this.state.editValues.length-1} type=\"text\" \r\n                value={this.newEditValue} \r\n                onChange={(e)=>this.changeEditValue(e)}/> \r\n              </div>\r\n\r\n              <div className='contentButton submitButton'>\r\n                <button type=\"submit\" style={{alignSelf:'center'}}>Save</button>\r\n              </div>\r\n\r\n            </form>)}\r\n            \r\n\r\n            {this.state.editMode==false?(\r\n            <div className='contentButton'>\r\n              <button onClick={()=>{this.setState({editMode:true})}} style={{alignSelf:'flex-end'}}>Edit</button>\r\n              <button>Cardify</button>\r\n            </div>\r\n            ):(<div style={{display:'none'}}></div>)}\r\n\r\n\r\n          </div>\r\n\r\n        )}\r\n\r\n\r\n      </div>\r\n      \r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":31,"column":56,"nodeType":"47","messageId":"48","endLine":31,"endColumn":58},{"ruleId":"45","severity":1,"message":"49","line":76,"column":11,"nodeType":"47","messageId":"48","endLine":76,"endColumn":13},{"ruleId":"45","severity":1,"message":"46","line":98,"column":46,"nodeType":"47","messageId":"48","endLine":98,"endColumn":48},{"ruleId":"45","severity":1,"message":"49","line":135,"column":24,"nodeType":"47","messageId":"48","endLine":135,"endColumn":26},{"ruleId":"45","severity":1,"message":"46","line":187,"column":31,"nodeType":"47","messageId":"48","endLine":187,"endColumn":33},{"ruleId":"50","severity":1,"message":"51","line":189,"column":9,"nodeType":"52","endLine":194,"endColumn":10},{"ruleId":"45","severity":1,"message":"46","line":192,"column":31,"nodeType":"47","messageId":"48","endLine":192,"endColumn":33},{"ruleId":"45","severity":1,"message":"46","line":199,"column":36,"nodeType":"47","messageId":"48","endLine":199,"endColumn":38},{"ruleId":"50","severity":1,"message":"51","line":214,"column":9,"nodeType":"52","endLine":214,"endColumn":61},{"ruleId":"45","severity":1,"message":"46","line":229,"column":29,"nodeType":"47","messageId":"48","endLine":229,"endColumn":31},{"ruleId":"45","severity":1,"message":"46","line":259,"column":33,"nodeType":"47","messageId":"48","endLine":259,"endColumn":35},{"ruleId":"45","severity":1,"message":"46","line":273,"column":33,"nodeType":"47","messageId":"48","endLine":273,"endColumn":35},{"ruleId":"45","severity":1,"message":"46","line":274,"column":62,"nodeType":"47","messageId":"48","endLine":274,"endColumn":64},{"ruleId":"45","severity":1,"message":"46","line":280,"column":62,"nodeType":"47","messageId":"48","endLine":280,"endColumn":64},{"ruleId":"50","severity":1,"message":"51","line":282,"column":15,"nodeType":"52","endLine":282,"endColumn":49},{"ruleId":"45","severity":1,"message":"46","line":288,"column":33,"nodeType":"47","messageId":"48","endLine":288,"endColumn":35},{"ruleId":"45","severity":1,"message":"46","line":303,"column":70,"nodeType":"47","messageId":"48","endLine":303,"endColumn":72},{"ruleId":"45","severity":1,"message":"46","line":318,"column":33,"nodeType":"47","messageId":"48","endLine":318,"endColumn":35},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]